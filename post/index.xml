<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on zgq blog</title>
    <link>https://edqwer.github.io/post/</link>
    <description>Recent content in Posts on zgq blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 16 Jan 2020 22:52:52 +0800</lastBuildDate>
    
	<atom:link href="https://edqwer.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>单一职责原则</title>
      <link>https://edqwer.github.io/post/design_pattern/srp/</link>
      <pubDate>Thu, 16 Jan 2020 22:52:52 +0800</pubDate>
      
      <guid>https://edqwer.github.io/post/design_pattern/srp/</guid>
      <description>单一职责原则（SRP） Single Responsibility Principle，描述为 A class or module should have a single reponsibility，翻译过来就是：一个类或者模块只负责完成一个职责（或者功能）
如何理解单一职责原则？ 一个类只负责完成一个职责或者功能。不要设计大而全的类，要设计粒度小、功能单一的类。单一职责原则是为了实现代码高内聚、低耦合，提高代码的复用性、可读性、可维护性。
如何判断类的职责是否足够单一？ 不同的应用场景、不同阶段的需求背景、不同的业务层面，对同一个类的职责是否单一，可能会有不同的判定结果。 出现下面这些情况就有可能说明这类的设计不满足单一职责原则： - 类中的代码行数、函数或者属性过多； - 类依赖的其他类过多，或者依赖类的其他类过多； - 私有方法过多； - 比较难给类起一个合适的名字； - 类中大量的方法都是集中操作类中的某几个属性。
类的职责是否设计得越单一越好？ 单一职责原则通过避免设计大而全的类，避免将不相关的功能耦合在一起，来提高类的内聚性。同时，类职责单一，类依赖的和被依赖的其他类也会变少，减少了代码的耦合性，以此来实现代码的高内聚、低耦合。但是，如果拆分得过细，实际上会适得其反，反倒会降低内聚性，也会影响代码的可维护性。</description>
    </item>
    
    <item>
      <title>对扩展开放，对修改关闭</title>
      <link>https://edqwer.github.io/post/design_pattern/ocp/</link>
      <pubDate>Thu, 16 Jan 2020 22:52:10 +0800</pubDate>
      
      <guid>https://edqwer.github.io/post/design_pattern/ocp/</guid>
      <description>对扩展开放，对修改关闭（OCP） Open Closed Principle，描述为 software entities (modules, classes, functions, etc.) should be open for extension , but closed for modification，翻译过来就是：软件实体（模块、类、方法等）应该“对扩展开放、对修改关闭”。</description>
    </item>
    
    <item>
      <title>设计模式6大原则</title>
      <link>https://edqwer.github.io/post/design_pattern/sum/</link>
      <pubDate>Thu, 16 Jan 2020 22:51:11 +0800</pubDate>
      
      <guid>https://edqwer.github.io/post/design_pattern/sum/</guid>
      <description>单一职责原则（Single Responsibility Principle）  定义：就一个类而言， 应该仅有一个引起它变化的原因。
 理解：不同的类具备不同的职责，各司其职。做系统设计是，如果发现有一个类拥有了两种职责，那么就要问一个问题：可以将这个类分成两个类吗？如果真的有必要，那就分开，千万不要让一个类干的事情太多。
总结：一个类只承担一个职责
开放封闭原则（Open Close Principle）  定义：类、模块、函数等应该是可以拓展的，但是不可修改。
 理解：类、模块、函数，可以去扩展，但不要去修改。如果要修改代码，尽量用继承或组合的方式来扩展类的功能，而不是直接修改类的代码。当然，如果能保证对整个架构不会产生任何影响，那就没必要搞的那么复杂，直接改这个类吧。
总结：对软件实体的改动，最好用扩展而非修改的方式。
里氏替换原则（Liskov Substitution Principle）  定义：所有引用基类的地方必须能透明地使用其子类的对象。
 理解：父类可被子类替换，但反之不一定成立。也就是说，代码中可以将父类全部替换为子类，程序不会出现异常，但反过来就不一定了。
总结：在继承类是，务必重写（override）父类中所有的方法，尤其需要注意父类的protected方法（它们往往是让你重写的），子类尽量不要暴露自己的public方法供外界调用。
注：它是开闭原则的具体实现手段之一，它的核心原理是抽象 里氏替换原则的核心原理是抽象，抽象又依赖于继承这个特性，在OOP中，继承的优缺点相当明显，有点如下： （1）代码重用，减少创建类成本，每个子类拥有父类的属性和方法； （2）子类和父类基本相似，但又与父类有所区别； （3）提高代码的可拓展性。 继承的缺点： （1）继承是侵入性的，只要继承就必须拥有弗雷的所有属性和方法； （2）可能造成子类代码的冗余、灵活性降低，因为子类必须拥有弗雷的属性和方法。 开闭原则和里氏替换原则往往是生死相依、不离不弃的，通过里氏替换来达到对扩展的开发，对修改的关闭效果。
接口隔离原则（InterfaceSegregation Principles）  定义：一个类对另一个类的依赖应该建立在最小的接口上。
 理解：不要对外暴露没有实际意义的接口。也就是说，尽量保证接口的实用性。当需要对外暴露接口时，需要再三斟酌，若没必要对外提供就删了吧，因为一旦提供了就意味着，将来要多做一件事情，何苦给自己找事做呢。
总结：不要对外暴露没有实际意义的接口。
注：最小化， 减少依赖从而降低变更的风险。 建立单一接口，不要建立庞大臃肿接口；尽量细化接口，接口中方法尽量少。也就是说，我们要为各个类建立专用的接口，而不要试图建立一个很庞大的接口供所有依赖它的类调用。 （1）接口尽量小，但是要有限度。对接口进行细化可以提高程序设计的灵活性；但是如果过小，则会造成接口数量过多，使设计复杂化。所以，一定要适度。 （2）为依赖接口的类定制服务，只暴露给调用的类需要的方法，它不需要的方法则隐蔽起来。只有专注得为一个模块提供定制服务，才能建立最小的依赖关系。 （3）提高内聚，减少对外交互。接口方法尽量少用public修饰。接口是对外的承诺，承诺越少对系统开发越有利，变更风险也会越少。 以上（单一职责、开闭原则、里氏替换、接口隔离、依赖倒置）五个原则被Bob大叔在21世纪早期定义为SOLID原则。作为面向对象编程的5个基本原则，当这些原则被一起使用时，它们使得一个软件系统更清晰、简单，最大程度地拥抱变化。
依赖倒置原则（Dependence Inversion Principle）  高层模块不应该依赖于低层模块，两者都应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。
 理解：高层模块不应该依赖于底层模块，而应该依赖于抽象。抽象不应依赖于细节，细节应依赖于抽象。应该面向接口编程，不该面向实现类编程。面向实现类编程相当于就事论事，那是正向依赖；面向接口编程，相当于透过现象看本质，抓住事务的共性，那就是反向依赖，即依赖倒置。
总结：面向接口编程，提取出事务的本质和共性。
注：关系到系统的可拓展性、拥抱变化的能力、开闭原则 java中抽象指接口或抽象类，两者都不能直接被实例化的；细节就是实现类，实现接口或者集成抽象类而产生的也就细节，也就是可以可以加上yige 关键字new产生的对象。高层模块就是调用端，低层模块就是具体实现类。依赖倒置原则在java中表现就是，模块间依赖通过抽象发生，实现类之间不发生直接依赖关系，其依赖关系是通过接口或者抽象类产生的。如果类与类直接依赖细节，那么久会直接耦合。如此一来当修改时，就会同时修改依赖者代码，这样限制了可拓展性。
迪米特原则（Law of Demeter）也称最少知识原则  定义：一个软件实体应当尽可能少地与其他实体发生相互作用。
 理解：尽量减少对象之间的交互，从而减小类之间的耦合。在做系统设计时，不要让一个类依赖于太多其他的类，需尽量减小依赖关系，否则死都不知道怎么死的。
总结：一定要做到：低耦合、高内聚。
注：通过引入一个合理的第三者降低现有对象之间的耦合度。 一个类应该对自己需要耦合或者调用的类知道最少， 类的内部如何实现与调用者或者依赖关系越密切，耦合度越大，当一个类发生变化时，对另一个类的影响也越大。 （1）在类的划分上，应当尽量创建松耦合的类。类之间的耦合度约低，就越有利于服用。一个处于松耦合中的类一旦被修改，则不会对关联的类造成太大的波及。 （2）在类的机构设计上， 每一个类都应当尽量降低其成员变量和成员函数的访问权限。 （3）在对其他类的引用上， 一个类对其他对象的引用应当降到最低。</description>
    </item>
    
    <item>
      <title>Redis学习笔记</title>
      <link>https://edqwer.github.io/post/test/</link>
      <pubDate>Thu, 16 Jan 2020 22:41:06 +0800</pubDate>
      
      <guid>https://edqwer.github.io/post/test/</guid>
      <description>Redis学习笔记 第一篇 基础和应用篇 5种基础数据结构 string（字符串） Redis 的字符串是动态字符串，是可以修改的字符串，内部实现的结构类似与 Java 的 ArrayList ，采用预分配冗余空间的方式减少内存的频繁分配内部为当前字符串的分配的实际空间 capacity 通常要高于实际字符串长度 len ，当字符串长度小于 1MB 时，扩容都是加倍现有的空间，超过 1MB ，扩容一次只会多扩 1MB 空间。字符串最大长度为 512MB
【键值对】
&amp;gt; set name code OK &amp;gt; get name &amp;quot;code&amp;quot; &amp;gt; exists name (integer) 1 &amp;gt; del name (integer) 1 &amp;gt; get name (nil)  【过期和set命令扩展】
&amp;gt; set name code &amp;gt; get code &amp;quot;name&amp;quot; &amp;gt; expire name 5 ... # 等候 5s &amp;gt; get name (nil) &amp;gt; setex name 5 code &amp;gt; get name &amp;quot;code&amp;quot; .</description>
    </item>
    
    <item>
      <title>golang 单例模式</title>
      <link>https://edqwer.github.io/post/blog/</link>
      <pubDate>Wed, 06 Nov 2019 22:37:16 +0800</pubDate>
      
      <guid>https://edqwer.github.io/post/blog/</guid>
      <description>单例对象的类必须保证只有一个实例存在，全局有唯一接口访问
懒汉方式 指全局的单例实例在第一次被使用时构建。
【不加锁的懒汉方式】
type singleton struct{} var instance *singleton func GetIns() *singleton{ if instance == nil { instance = &amp;amp;singleton{} } return instance }  缺点：非线程安全。当正在创建时，有线程来访问此时ins = nil就会再创建，单例类就会有多个实例了。
【加锁的懒汉方式】
type singleton struct{} var ins *singleton var mu sync.Mutex func GetIns() *singleton{ mu.Lock() defer mu.Unlock() if ins == nil { ins = &amp;amp;singleton{} } return ins }  缺点：虽然解决并发的问题，但每次加锁是要付出代价的
【加检查锁的懒汉方式】 Check-Lock-Check模式 双重锁模式
type singleton struct{} var ins *singleton var mu sync.</description>
    </item>
    
  </channel>
</rss>